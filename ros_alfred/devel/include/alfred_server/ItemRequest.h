// Generated by gencpp from file alfred_server/ItemRequest.msg
// DO NOT EDIT!


#ifndef ALFRED_SERVER_MESSAGE_ITEMREQUEST_H
#define ALFRED_SERVER_MESSAGE_ITEMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace alfred_server
{
template <class ContainerAllocator>
struct ItemRequest_
{
  typedef ItemRequest_<ContainerAllocator> Type;

  ItemRequest_()
    : item()
    , goal()  {
    }
  ItemRequest_(const ContainerAllocator& _alloc)
    : item(_alloc)
    , goal(_alloc)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _item_type;
  _item_type item;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_type;
  _goal_type goal;




  typedef boost::shared_ptr< ::alfred_server::ItemRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::alfred_server::ItemRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ItemRequest_

typedef ::alfred_server::ItemRequest_<std::allocator<void> > ItemRequest;

typedef boost::shared_ptr< ::alfred_server::ItemRequest > ItemRequestPtr;
typedef boost::shared_ptr< ::alfred_server::ItemRequest const> ItemRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::alfred_server::ItemRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::alfred_server::ItemRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace alfred_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'alfred_server': ['/home/avengineer/alfred_ws/ros_alfred/src/alfred_server/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::alfred_server::ItemRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::alfred_server::ItemRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alfred_server::ItemRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alfred_server::ItemRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alfred_server::ItemRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alfred_server::ItemRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::alfred_server::ItemRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "413cbcf9e0b6d8aab984d410322d8ad5";
  }

  static const char* value(const ::alfred_server::ItemRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x413cbcf9e0b6d8aaULL;
  static const uint64_t static_value2 = 0xb984d410322d8ad5ULL;
};

template<class ContainerAllocator>
struct DataType< ::alfred_server::ItemRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alfred_server/ItemRequest";
  }

  static const char* value(const ::alfred_server::ItemRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::alfred_server::ItemRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string item\n\
float64[] goal\n\
";
  }

  static const char* value(const ::alfred_server::ItemRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::alfred_server::ItemRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.item);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ItemRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::alfred_server::ItemRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::alfred_server::ItemRequest_<ContainerAllocator>& v)
  {
    s << indent << "item: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.item);
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALFRED_SERVER_MESSAGE_ITEMREQUEST_H
